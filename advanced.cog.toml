name = "advanced_example"

# `base` is a standalone TOML object aka table that is not part of the context aka <ctx> logic
# ==========================================================
# A COGS CONTEXT IS DEFINED BY THE PRESENCE OF THE KEY `vars`
# otherwise the TOML table is treated normally
# ==========================================================
# `base` could just as well exist in another file, say JSON in this example, and resolve to the same values
# see external_inheritor context below
[base]
var1 = "var1_value"
var2 = "var2_value"
json_string = '''
{
  "var3": "var3_value",
  "some_var": "some_value"
}
'''
var4 = ["var", "4", "value"]

# inheritor pattern
# this allows explicit inheritance from `base` variables without adding more
# special syntax since the generation path logic does not change
[inheritor]
# "." - a single period is a reserved filepath string
# it is used to self-reference the cog file
# this helps avoid breaking generation when the cog file is moved or renamed
path = [".", ".base"]
[inheritor.vars]
var1.path = []
var2.path = []
var3 = {path = [[], ".base.json_string"], type ="json"}
var4 = {path = [], type ="toml{}"}

# `external_inheritor` resolves to the EXACT same values as the inheritor context above
# the base object is simply found in an external file
[external_inheritor]
path = ["test_files/external_inheritor.json", ".base"]
[external_inheritor.vars]
var1.path = []
var2.path = []

# read type must be explicit since we are dealing with a JSON string *inside* of a JSON object
var3.type = "json"
var3.path = [[], ".base.json_string"]

# since `var4` does not map to a flat string
# type must be set to JSONcomplex aka "json{}" instead of the inherited json type
var4.type = "json{}"
var4.path = []

# this example mainly deals with how one handles JSON data embedded in another format
# or as a proper JSON file
[flat_json]
path = ["./test_files/json_map.json", ".flat_map"]
[flat_json.vars]
var1.path = []
var2.path = []
var3.path = []
var4.path = [[], ".complex_map.nested"]

[complex_json]
path = ["./test_files/json_map.json", ".flat_map"]
[complex_json.vars]
array_json = {path="./test_files/array.json", type="whole"}
# returns file in entirety as value for k/v pair
entire_file = {path = [[],""], type = "whole"}
# '[[], ""]' retains "./test_files/json_map.json" in [] reference in index 0
# and "" in index 1 disables object traversal
complex_map = {path = [[],""], type = "json{}"}
# returns just the array element without an overlying associative array
# specifying subpath "complex_map.array" along with the read type of whole
# allows the traversed element to be returned without casting
array = {path = [[],".complex_map.array"], type = "whole"}
# retrieves a complex object from a string held in a yaml file
complex_var = {path = ["./test_files/kustomization.yaml", ".complexJsonMap"], type = "json{}"}
